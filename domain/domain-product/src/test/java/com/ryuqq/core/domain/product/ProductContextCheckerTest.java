package com.ryuqq.core.domain.product;

import static org.junit.jupiter.api.Assertions.*;

class ProductContextCheckerTest {

	/**
	 * 옵션 이름으로 매핑되는 옵션을 찾는다.
	 *
	 * 1. 옵션 단 유지
	 *  - 매칭되는 옵션이 없다.
	 *      - 기존 옵션그룹에 새로운 옵션 디테일이 따졌다.
	 *      - 기존 옵션그룹에서 아예 새로운 옵션그룹으로 변경됬다 (컬러 -> 사이즈)
	 *      - 기존에 존재하는 상품들이 다 삭제 처리된다.
	 *
	 *  - 매칭되는 옵션이 있다.
	 *  	- 기존 옵션그룹이 유지된다.
	 *      - 옵션 디테일의 변경 가능성이 있다.
	 *
	 *
	 * 2. 옵션 단 변경
	 *
	 * - 매칭 되는 옵션이 있다. (고려 대상 X)
	 * 	   - 말이 안된다. (기존 블랙  -> 현재 블랙 S ) 이런식으로 글자가 추가되거나 삭제되 매칭이 될 수 가 없다.
	 * - 매칭 되는 옵션이 없다.
	 * 	   - 옵션 그룹의 변경 가능성이 있다. (컬러, 사이즈 -> 사이즈) or (컬러 -> 컬러,사이즈)
	 *
	 *
	 * ---> 매칭 되는 옵션이 없을때의 공통점
	 *    어떤 옵션이 추가되고 삭제됬는지
	 *    이 없는 (새롭게 인풋으로 들어간) 옵션의 그룹부터 기존의 옵션과 따져봐야함
	 *
	 *     (삭제되는 예시) 기존 사이즈, 컬러 (-> 생각해보면 매칭 되는 옵션이 하나도 없을테니 다 삭제처리가 되긴함)
	 *	   변경 후 사이즈
	 *
	 *	   기존의 프로덕트를 사용할수 없으니 다 삭제 후 새로 등록
	 *	   이유 블랙 S가 옐로 S 중 어떤게 S로 갈건지 합쳐서갈건지 모름 이렇게 옵션 한가지만 삭제되도 어디에 매칭시켜야 할 지 알 수 없음
	 *
	 *	   (추가되는 예시) 기존 사이즈
	 *	   변경 후 사이즈, 컬러
	 *
	 *	   기존의 프로덕트를 사용할수없으니 다 삭제 후 새로 등록 ( -> 생각해보면 매칭되는 옵션이 하나도 없을테니 다 삭제처리가 되긴함)
	 *	   이유 (S, M, L 이던 상품이 블랙 S, 옐로 S  이렇게 컬러가 두개만 추가 되도 어디에 매칭시켜야 할 지 알 수 없음)
	 *
	 *
	 *
	 * 블랙 S, M
	 * 블랙 L
	 *
	 * 블랙 S, M
	 *
	 * 옐로 S, M
	 * 블랙 S, M
	 *
	 *
	 */





}

plugins {
	id 'java-library'
	id 'org.springframework.boot' apply false
	id 'io.spring.dependency-management'
	id 'io.spring.javaformat' apply(false)
	id 'org.asciidoctor.jvm.convert' apply(false)
	id 'jacoco'
	id 'com.diffplug.spotless' version "${spotlessVersion}"
	id 'checkstyle'
}

allprojects {
	group = "${projectGroup}"
	version = "${applicationVersion}"
	sourceCompatibility = JavaVersion.VERSION_21

	repositories {
		mavenCentral()
	}
}

spotless {
	java {
		target fileTree('src') {
			include '**/*.java'
			exclude '**/Q*.java'
			exclude '**/generated/**'
		}
		importOrderFile(rootProject.file('rule-config/importorder'))
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

checkstyle {
	toolVersion = "${checkstyleVersion}"
	configFile = rootProject.file('rule-config/checkstyle-rules.xml')
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.asciidoctor.jvm.convert'
	apply plugin: 'jacoco'
	apply plugin: 'checkstyle'
	apply plugin: 'com.diffplug.spotless'

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersions}"
		}
	}

	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-aop"
		testImplementation "org.springframework.boot:spring-boot-starter-test"
		testImplementation "org.junit.platform:junit-platform-suite:${junitPlatFormVersion}"
		testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
		testImplementation 'com.h2database:h2'
	}

	jacoco {
		toolVersion = "${jacocoVersion}"
	}

	checkstyle {
		configFile = rootProject.file('rule-config/checkstyle-rules.xml')
	}

	spotless {
		java {
			target fileTree('src') {
				include '**/*.java'
			}
			importOrderFile(rootProject.file('rule-config/importorder'))
			removeUnusedImports()
			trimTrailingWhitespace()
			endWithNewline()
		}
	}

	tasks.test {
		useJUnitPlatform {
			excludeTags('restdocs')
		}
		finalizedBy jacocoTestReport
	}

	tasks.named('jacocoTestReport') {
		dependsOn test
		reports {
			html.required.set(true)
			xml.required.set(false)
			csv.required.set(false)
		}
		classDirectories.setFrom(
			fileTree(dir: "$buildDir/classes/java/main").matching {
				exclude '**/Q*', '**/config/**', '**/application/**'
			}
		)
		sourceDirectories.setFrom(files("src/main/java"))
		executionData.setFrom(fileTree(dir: buildDir).include("jacoco/test.exec"))
	}

	tasks.named('jacocoTestCoverageVerification') {
		dependsOn test
		violationRules {
			rule {
				element = 'CLASS'
				limit {
					minimum = 0.8
				}
			}
			rule {
				element = 'METHOD'
				limit {
					minimum = 0.7
				}
			}
		}
		classDirectories.setFrom(
			fileTree(dir: "$buildDir/classes/java/main").matching {
				exclude '**/Q*', '**/config/**', '**/application/**', '**/generated/**'
			}
		)
		executionData.setFrom(fileTree(dir: buildDir).include("jacoco/test.exec"))
	}

	bootJar.enabled = false
	jar.enabled = true

	tasks.register('unitTest', Test) {
		group = 'verification'
		useJUnitPlatform {
			excludeTags('develop', 'context', 'restdocs')
		}
	}

	tasks.register('restDocsTest', Test) {
		group = 'verification'
		useJUnitPlatform {
			includeTags('restdocs')
		}
	}

	tasks.named('asciidoctor') {
		dependsOn restDocsTest
	}

	tasks.register('contextTest', Test) {
		group = 'verification'
		useJUnitPlatform {
			includeTags('context')
		}
	}

	tasks.withType(JavaCompile).configureEach {
		options.compilerArgs += ['-parameters']
	}

	tasks.withType(Checkstyle).configureEach {
		reports {
			xml.required.set(false)
			html.required.set(true)
		}
		dependsOn tasks.named("compileJava")
		dependsOn tasks.named("compileTestJava")

		exclude '**/Q*.java' // QueryDSL 생성된 파일 제외
		exclude '**/generated/**' // 생성된 모든 파일 제외
	}
}

tasks.register("jacocoTestReportAll") {
	dependsOn subprojects.collect { subproject ->
		subproject.tasks.matching { it.name == "jacocoTestReport" }
	}
}

tasks.register("jacocoTestCoverageVerificationAll") {
	dependsOn subprojects.collect { subproject ->
		subproject.tasks.matching { it.name == "jacocoTestCoverageVerification" }
	}
}
